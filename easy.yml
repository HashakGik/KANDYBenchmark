-
  name: triangle vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_shape(C1, triangle).

  positive_set:
  - quadrant_or_center:
    - {shape: triangle, color: ~, size: ~}
  negative_set:
  - quadrant_or_center:
    - {shape: not_triangle, color: ~, size: ~}
-
  name: square vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_shape(C1, square).

  positive_set:
  - quadrant_or_center:
    - {shape: square, color: ~, size: ~}
  negative_set:
  - quadrant_or_center:
    - {shape: not_square, color: ~, size: ~}
-
  name: circle vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_shape(C1, circle).

  positive_set:
  - quadrant_or_center:
    - {shape: circle, color: ~, size: ~}
  negative_set:
  - quadrant_or_center:
    - {shape: not_circle, color: ~, size: ~}

-
  name: red vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_color(C1, red).

  positive_set:
  - quadrant_or_center:
    - {shape: ~, color: red, size: ~}
  negative_set:
  - quadrant_or_center:
    - {shape: ~, color: not_red, size: ~}

-
  name: green vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_color(C1, green).

  positive_set:
  - quadrant_or_center:
    - {shape: ~, color: green, size: ~}
  negative_set:
  - quadrant_or_center:
    - {shape: ~, color: not_green, size: ~}

-
  name: blue vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_color(C1, blue).

  positive_set:
  - quadrant_or_center:
    - {shape: ~, color: blue, size: ~}
  negative_set:
  - quadrant_or_center:
    - {shape: ~, color: not_blue, size: ~}

-
  name: cyan vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_color(C1, cyan).

  positive_set:
  - quadrant_or_center:
    - {shape: ~, color: cyan, size: ~}
  negative_set:
  - quadrant_or_center:
    - {shape: ~, color: not_cyan, size: ~}

-
  name: magenta vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_color(C1, magenta).

  positive_set:
  - quadrant_or_center:
    - {shape: ~, color: magenta, size: ~}
  negative_set:
  - quadrant_or_center:
    - {shape: ~, color: not_magenta, size: ~}

-
  name: yellow vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_color(C1, yellow).

  positive_set:
  - quadrant_or_center:
    - {shape: ~, color: yellow, size: ~}
  negative_set:
  - quadrant_or_center:
    - {shape: ~, color: not_yellow, size: ~}

-
  name: red triangle on the right
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- extract_children(C, L), last(L, C1), extract_shape(C1, triangle), extract_color(C1, red).

  positive_set:
  - side_by_side:
    - {shape: ~, color: ~, size: ~}
    - {shape: triangle, color: red, size: ~}
  negative_set:
  - side_by_side:
    - {shape: ~, color: ~, size: ~}
    - pick:
        n: 1
        list:
        - {shape: not_triangle, color: ~, size: ~}
        - {shape: triangle, color: not_red, size: ~}

-
  name: red triangle on the right and arbitrary objects
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- extract_children(C, L), last(L, C1), extract_shape(C1, triangle), extract_color(C1, red).

  positive_set:
  - side_by_side:
    - random_repeat_before:
        min: 2
        max: 5
        list:
        - {shape: ~, color: ~, size: ~}
    - {shape: triangle, color: red, size: ~}
  negative_set:
  - side_by_side:
    - permute:
      - {shape: triangle, color: red, size: ~}
      - random_repeat_before:
          min: 2
          max: 5
          list:
          - {shape: ~, color: ~, size: ~}

-
  name: red triangle on the right and at least one circle and arbitrary objects
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- extract_children(C, L), last(L, C1), member(C2, L), extract_shape(C1, triangle), extract_color(C1, red), extract_shape(C2, circle).

  positive_set:
  - side_by_side:
    - permute:
      - {shape: circle, color: ~, size: ~}
      - random_repeat_before:
          min: 1
          max: 4
          list:
          - {shape: ~, color: ~, size: ~}
    - {shape: triangle, color: red, size: ~}
  negative_set:
  - side_by_side: # De Morgan: either there is no red triangle...
    - pick:
        n: 1
        list:
        - {shape: not_triangle, color: ~, size: ~}
        - {shape: triangle, color: not_red, size: ~}
    - random_repeat_before:
        min: 2
        max: 5
        list:
        - {shape: ~, color: ~, size: ~}
  - side_by_side: # ...Nor we have a circle
    - random_repeat_before:
        min: 2
        max: 5
        list:
        - {shape: not_circle, color: ~, size: ~}
    - pick:
        n: 1
        list:
        - {shape: not_triangle, color: ~, size: ~}
        - {shape: triangle, color: not_red, size: ~}

-
  name: red triangle on the right and at least one blue object and arbitrary objects
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- extract_children(C, L), last(L, C1), member(C2, L), extract_shape(C1, triangle), extract_color(C1, red), extract_color(C2, blue).

  positive_set:
  - side_by_side:
    - permute:
      - {shape: ~, color: blue, size: ~}
      - random_repeat_before:
          min: 1
          max: 4
          list:
            - {shape: ~, color: ~, size: ~}
    - {shape: triangle, color: red, size: ~}
  negative_set:
  - side_by_side:
    - pick:
        n: 1
        list:
        - {shape: not_triangle, color: ~, size: ~}
        - {shape: triangle, color: not_red, size: ~}
    - random_repeat_before:
        min: 2
        max: 5
        list:
        - {shape: ~, color: not_blue, size: ~}
  - side_by_side:
    - random_repeat_before:
        min: 2
        max: 5
        list:
        - {shape: ~, color: not_blue, size: ~}
    - pick:
        n: 1
        list:
        - {shape: not_triangle, color: ~, size: ~}
        - {shape: triangle, color: not_red, size: ~}

-
  name: triangle and square, same color
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), contains(C, C2), same_color(_, [C1, C2]), extract_shape(C1, triangle), extract_shape(C2, square).

  positive_set:
    - quadrant_or_center:
      - store_before:
          alias: color
          list:
          - pick_before:
              n: 1
              list:
              - {shape: triangle, color: red, size: ~}
              - {shape: triangle, color: green, size: ~}
              - {shape: triangle, color: blue, size: ~}
              - {shape: triangle, color: cyan, size: ~}
              - {shape: triangle, color: magenta, size: ~}
              - {shape: triangle, color: yellow, size: ~}
      - union: # Convoluted way to extract the color from the stored triangle and transfer it to a square
        - difference:
          - {shape: ~, color: ~, size: ~}
          - symmetric_difference:
            - symmetric_difference:
              - symmetric_difference:
                - {shape: ~, color: ~, size: small}
                - recall:
                    alias: color
              - {shape: triangle, color: ~, size: ~}
            - {shape: square, color: ~, size: ~}
        - difference:
          - {shape: ~, color: ~, size: ~}
          - symmetric_difference:
            - symmetric_difference:
              - symmetric_difference:
                - {shape: ~, color: ~, size: large}
                - recall:
                    alias: color
              - {shape: triangle, color: ~, size: ~}
            - {shape: square, color: ~, size: ~}
  negative_set:
    - quadrant_or_center:
      - {shape: triangle, color: ~, size: ~}
      - {shape: square, color: ~, size: ~}
-
  name: palindrome aba
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- extract_children(C, L), reverse(L, L).

  positive_set:
  - side_by_side:
    - palindrome:
      - {shape: ~, color: ~, size: ~}
      - {shape: ~, color: ~, size: ~}
  negative_set:
  - side_by_side:
    - permute:
      - palindrome:
        - {shape: ~, color: ~, size: ~}
        - {shape: ~, color: ~, size: ~}
-
  name: house
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_op_and_chld(C1, stack, [C2, C3]), extract_shape(C2, triangle), extract_shape(C3, square).
    
  positive_set:
  - quadrant_or_center:
    - stack:
      - {shape: triangle, color: ~, size: ~}
      - {shape: square, color: ~, size: ~}
  negative_set:
  - quadrant_or_center:
    - any_displacement:
      - {shape: ~, color: ~, size: ~}
      - {shape: ~, color: ~, size: ~}
  
