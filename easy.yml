-
  name: red triangle vs red square
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_shape(C1, triangle), extract_color(C1, red).
    
  positive_set:
  - random:
    - {shape: triangle, color: red, size: ~}
  negative_set:
  - random:
    - {shape: square, color: red, size: ~}
-
  name: triangle vs square (any color)
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_shape(C1, triangle).
    
  positive_set:
  - random:
    - {shape: triangle, color: ~, size: ~}
  negative_set:
  - random:
    - {shape: square, color: ~, size: ~}

-
  name: triangle vs any (any color)
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_shape(C1, triangle).
    
  positive_set:
  - random:
    - {shape: triangle, color: ~, size: ~}
  negative_set:
  - random:
    - {shape: not_triangle, color: ~, size: ~}

-
  name: red triangle vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_shape(C1, triangle), extract_color(C1, red).
    
  positive_set:
  - random:
    - {shape: triangle, color: red, size: ~}
  negative_set:
  - random:
    - pick:
        n: 1
        list:
        - {shape: not_triangle, color: ~, size: ~}
        - {shape: triangle, color: not_red, size: ~}
      
-
  name: blue triangle vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_shape(C1, triangle), extract_color(C1, blue).
  
  positive_set:  
  - random:
    - {shape: triangle, color: blue, size: ~}
  negative_set:
  - random:
    - pick:
        n: 1
        list:
        - {shape: not_triangle, color: ~, size: ~}
        - {shape: triangle, color: not_blue, size: ~}
      
-
  name: green triangle vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_shape(C1, triangle), extract_color(C1, green).
    
  positive_set:
  - random:
    - {shape: triangle, color: green, size: ~}
  negative_set:
  - random:
    - pick:
        n: 1
        list:
        - {shape: not_triangle, color: ~, size: ~}
        - {shape: triangle, color: not_green, size: ~}
      
-
  name: red square vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_shape(C1, square), extract_color(C1, red).
    
  positive_set:
  - random:
    - {shape: square, color: ~, size: ~}
  negative_set:
  - random:
    - pick:
        n: 1
        list:
        - {shape: not_square, color: ~, size: ~}
        - {shape: square, color: not_red, size: ~}
      
-
  name: blue circle vs any
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_shape(C1, circle), extract_color(C1, blue).
    
  positive_set:
  - random:
    - {shape: circle, color: blue, size: ~}
  negative_set:
  - random:
    - pick:
        n: 1
        list:
        - {shape: not_circle, color: ~, size: ~}
        - {shape: circle, color: not_blue, size: ~}
      
-
  name: red triangle on the right
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- extract_children(C, L), nth0(1, L, C1), contains(C1, C2), extract_shape(C2, triangle), extract_color(C2, red).
    
  positive_set:
  - side_by_side:
    - random:
      - {shape: ~, color: ~, size: ~}
    - random:
      - {shape: triangle, color: red, size: ~}
  negative_set:
  - side_by_side:
    - random:
      - {shape: ~, color: ~, size: ~}
      - random:
        - pick:
            n: 1
            list:
            - {shape: not_triangle, color: ~, size: ~}
            - {shape: triangle, color: not_red, size: ~}
            
-
  name: red triangle on the right and arbitrary objects
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- extract_children(C, L), nth0(1, L, C1), contains(C1, C2), extract_shape(C2, triangle), extract_color(C2, red).
    
  positive_set:
  - side_by_side:
    - random_repeat_before:
        min: 2
        max: 5
        list:
          - {shape: ~, color: ~, size: ~}
    - {shape: triangle, color: red, size: ~}
  negative_set:
  - side_by_side:
    - pick:
        n: 1
        list:
          - {shape: not_triangle, color: ~, size: ~}
          - {shape: triangle, color: not_red, size: ~}
    - random_repeat_before:
        min: 2
        max: 5
        list:
          - {shape: ~, color: ~, size: ~}
          
-
  name: red triangle on the right and at least one circle and arbitrary objects
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- extract_children(C, L), nth0(1, L, C1), contains(C1, C2), extract_shape(C2, triangle), extract_color(C2, red), contains(C1, C3), extract_shape(C3, circle).
    
  positive_set:
  - side_by_side:
    - permute:
      - {shape: circle, color: ~, size: ~}
      - random_repeat_before:
          min: 1
          max: 4
          list:
            - {shape: ~, color: ~, size: ~}
    - {shape: triangle, color: red, size: ~}
  negative_set:
  - side_by_side: # De Morgan: either there is no red triangle...
    - pick:
        n: 1
        list:
          - {shape: not_triangle, color: ~, size: ~}
          - {shape: triangle, color: not_red, size: ~}
    - random_repeat_before:
        min: 2
        max: 5
        list:
          - {shape: ~, color: ~, size: ~}
  - side_by_side: # ...Nor we have a circle
    - {shape: ~, color: ~, size: ~}
    - random_repeat_before:
        min: 2
        max: 5
        list:
          - {shape: not_circle, color: ~, size: ~}
          
-
  name: red triangle on the right and at least one blue object and arbitrary objects
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- extract_children(C, L), nth0(1, L, C1), contains(C1, C2), extract_shape(C2, triangle), extract_color(C2, red), contains(C1, C3), extract_color(C3, blue).
    
  positive_set:
  - side_by_side:
    - {shape: triangle, color: red, size: ~}
    - permute:
      - {shape: ~, color: blue, size: ~}
      - random_repeat_before:
          min: 1
          max: 4
          list:
            - {shape: ~, color: ~, size: ~}
  negative_set:
  - side_by_side:
    - pick:
        n: 1
        list:
          - {shape: not_triangle, color: ~, size: ~}
          - {shape: triangle, color: not_red, size: ~}
    - random_repeat_before:
        min: 2
        max: 5
        list:
          - {shape: ~, color: ~, size: ~}
  - side_by_side:
    - {shape: ~, color: ~, size: ~}
    - random_repeat_before:
        min: 2
        max: 5
        list:
          - {shape: ~, color: not_blue, size: ~}
          
-
  name: triangle and square, same color
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), contains(C, C2), same_color(_, [C1, C2]), extract_shape(C1, triangle), extract_shape(C2, square).
    
  positive_set:
    - random:
      - store_before:
          alias: color
          list:
          - pick_before:
              n: 1
              list:
              - {shape: triangle, color: red, size: ~}
              - {shape: triangle, color: green, size: ~}
              - {shape: triangle, color: blue, size: ~}
              - {shape: triangle, color: cyan, size: ~}
              - {shape: triangle, color: magenta, size: ~}
              - {shape: triangle, color: yellow, size: ~}
      - union: # Convoluted way to extract the color from the stored triangle and transfer it to a square
        - difference:
          - {shape: ~, color: ~, size: ~}
          - symmetric_difference:
            - symmetric_difference:
              - symmetric_difference:
                - {shape: ~, color: ~, size: small}
                - recall:
                    alias: color
              - {shape: triangle, color: ~, size: ~}
            - {shape: square, color: ~, size: ~}
        - difference:
          - {shape: ~, color: ~, size: ~}
          - symmetric_difference:
            - symmetric_difference:
              - symmetric_difference:
                - {shape: ~, color: ~, size: large}
                - recall:
                    alias: color
              - {shape: triangle, color: ~, size: ~}
            - {shape: square, color: ~, size: ~}
  negative_set:
    - random:
      - {shape: triangle, color: ~, size: ~}
      - {shape: square, color: ~, size: ~}
-
  name: palindrome aba
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- extract_children(C, L), reverse(L, L).
    
  positive_set:
  - side_by_side:
    - palindrome:
      - {shape: ~, color: ~, size: ~}
      - {shape: ~, color: ~, size: ~}
  negative_set:
  - side_by_side:
    - permute:
      - palindrome:
        - {shape: ~, color: ~, size: ~}
        - {shape: ~, color: ~, size: ~}       
-
  name: house
  gamma: 1.0
  beta: 1.0
  samples: 100
  train_split: 0.5
  val_split: 0.25
  noisy_color: True
  noisy_size: True
  positive_rule: >-
    valid(C) :- contains(C, C1), extract_op_and_chld(C1, stack, [C2, C3]), extract_shape(C2, triangle), extract_shape(C3, square).
    
  positive_set:
  - random:
    - stack:
      - {shape: triangle, color: ~, size: ~}
      - {shape: square, color: ~, size: ~}
  negative_set:
  - random:
    - any_composition:
      - {shape: ~, color: ~, size: ~}
      - {shape: ~, color: ~, size: ~}
  
