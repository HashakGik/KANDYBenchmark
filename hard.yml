-
  name: structured vs random
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_operator(C, COMP), non_random(COMP).
    
  positive_set:
  - any_displacement:
    - random_repeat_before:
        min: 3
        max: 5
        list:
          - &any_obj {shape: ~, color: ~, size: ~}
  negative_set:
  - random:
    - random_repeat_before:
        min: 3
        max: 5
        list:
          - *any_obj
-
  name: shared attribute vs random
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_children(C, L), same_attribute(L).
    
  positive_set:
  - any_displacement:
    - random_repeat_before:
        min: 3
        max: 5
        list:
          - pick_before: &fixed_random_attr
              n: 1
              list:
                - &any_tri {shape: triangle, color: ~, size: ~}
                - &any_squ {shape: square, color: ~, size: ~}
                - &any_cir {shape: circle, color: ~, size: ~}
                - &any_sml {shape: ~, color: ~, size: small}
                - &any_lrg {shape: ~, color: ~, size: large}
                - &any_red {shape: ~, color: red, size: ~}
                - &any_grn {shape: ~, color: green, size: ~}
                - &any_blu {shape: ~, color: blue, size: ~}
                - &any_cyn {shape: ~, color: cyan, size: ~}
                - &any_mag {shape: ~, color: magenta, size: ~}
                - &any_ylw {shape: ~, color: yellow, size: ~}
              
  
  negative_set:
  - any_displacement:
    - random_repeat_before:
        min: 3
        max: 5
        list:
          - *any_obj
            
            
-
  name: flat palindromes
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_children(C, L), reverse(L, L).
    
  positive_set:
  - any_line:
    - palindrome:
      - repeat_before:
          n: 3
          list:
            - *any_obj
  negative_set:
  - any_line:
    - permute:
      - palindrome:          # A permuted palindrome guarantees that there will be the same objects as the positive set (which is different than a permutation of 5 random objects)
        - repeat_before:
            n: 3
            list:
              - *any_obj
-
  name: balanced structures
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    perpendicular(C) :- extract_operator(C, stack), contains(C, C1), extract_operator(C1, side_by_side).
    perpendicular(C) :- extract_operator(C, side_by_side), contains(C, C1), extract_operator(C1, stack).
    valid(C) :- extract_children(C, L), length(L, N), getmiddle(L, C1), extract_children(C1, L1), length(L1, N), perpendicular(C).
                
  positive_set:
  - side_by_side:
    - argsort:
        idx: [0, 1, 4, 2, 3]
        list:
          - repeat_before:
              n: 4
              list:
                - *any_obj
          - stack:
            - repeat_before:
                n: 5
                list:
                  - *any_obj
  - stack:
    - argsort:
        idx: [0, 1, 4, 2, 3]
        list:
          - repeat_before:
              n: 4
              list:
                - *any_obj
          - side_by_side:
            - repeat_before:
                n: 5
                list:
                  - *any_obj
  negative_set:
  - side_by_side:
    - permute:
        - repeat_before:
            n: 4
            list:
              - *any_obj
        - stack:
          - repeat_before:
              n: 5
              list:
                - *any_obj
  - stack:
    - permute:
        - repeat_before:
            n: 4
            list:
              - *any_obj
        - side_by_side:
          - repeat_before:
              n: 5
              list:
                - *any_obj
-
  name: shared intersection
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    perpendicular(C) :- extract_operator(C, stack), contains(C, C1), extract_operator(C1, side_by_side).
    perpendicular(C) :- extract_operator(C, side_by_side), contains(C, C1), extract_operator(C1, stack).
    valid(C) :- extract_children(C, L), length(L, N), getmiddle(L, C1), extract_children(C1, L1), length(L1, N), nth0(N1, L1, X), perpendicular(C), same_color(_, L1), delete(L, C1, L2), same_shape(_, [X|L2]).
                
  positive_set:
  - side_by_side:
    - argsort:
        idx: [0, 1, 4, 2, 3]
        list:
          - repeat_before:
              n: 4
              list:
                - store_before:
                    alias: attr_1
                    list:
                      - pick_before:
                          n: 1
                          list:
                            - *any_tri
                            - *any_squ
                            - *any_cir
          - stack:
            - argsort:
                idx: [0, 1, 4, 2, 3]
                list:
                  - repeat_before:
                      n: 4
                      list:
                        - store_before:
                            alias: attr_2
                            list:
                              - pick_before:
                                  n: 1
                                  list:
                                    - *any_red
                                    - *any_grn
                                    - *any_blu
                                    - *any_cyn
                                    - *any_mag
                                    - *any_ylw
                  - intersection: # Important: rows and columns fix disjoint features, so that their intersection is never empty.
                      - recall:
                          alias: attr_1
                      - recall:
                          alias: attr_2
  - stack:
    - argsort:
        idx: [0, 1, 4, 2, 3]
        list:
          - repeat_before:
              n: 4
              list:
                - store_before:
                    alias: attr_1
                    list:
                      - pick_before:
                          n: 1
                          list:
                            - *any_tri
                            - *any_squ
                            - *any_cir
          - side_by_side:
            - argsort:
                idx: [0, 1, 4, 2, 3]
                list:
                  - repeat_before:
                      n: 4
                      list:
                        - store_before:
                            alias: attr_2
                            list:
                              - pick_before:
                                  n: 1
                                  list:
                                    - *any_red
                                    - *any_grn
                                    - *any_blu
                                    - *any_cyn
                                    - *any_mag
                                    - *any_ylw
                  - intersection:
                      - recall:
                          alias: attr_1
                      - recall:
                          alias: attr_2     

  
  negative_set:
  - side_by_side:
    - argsort:
        idx: [0, 1, 4, 2, 3]
        list:
          - repeat_before:
              n: 4
              list:
                - store_before:
                    alias: shape
                    list:
                      - pick_before:
                          n: 1
                          list:
                            - *any_tri
                            - *any_squ
                            - *any_cir
          - stack:
            - argsort:
                idx: [0, 1, 4, 2, 3]
                list:
                  - repeat_before:
                      n: 4
                      list:
                        - store_before:
                            alias: color
                            list:
                              - pick_before:
                                  n: 1
                                  list:
                                    - *any_red
                                    - *any_grn
                                    - *any_blu
                                    - *any_cyn
                                    - *any_mag
                                    - *any_ylw
                  - difference:
                    - recall:
                        alias: shape
                    - recall:
                        alias: color 
  - stack:
    - argsort:
        idx: [0, 1, 4, 2, 3]
        list:
          - repeat_before:
              n: 4
              list:
                - store_before:
                    alias: shape
                    list:
                      - pick_before:
                          n: 1
                          list:
                            - *any_tri
                            - *any_squ
                            - *any_cir
          - side_by_side:
            - argsort:
                idx: [0, 1, 4, 2, 3]
                list:
                  - repeat_before:
                      n: 4
                      list:
                        - store_before:
                            alias: color
                            list:
                              - pick_before:
                                  n: 1
                                  list:
                                    - *any_red
                                    - *any_grn
                                    - *any_blu
                                    - *any_cyn
                                    - *any_mag
                                    - *any_ylw
                  - difference:
                    - recall:
                        alias: shape
                    - recall:
                        alias: color
  
-
  name: sorted features
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_op_and_chld(C, grid, [C1, C2, C3, C4]), extract_children(C1, L1), length(L1, 2), extract_children(C2, L2), length(L2, 3), extract_children(C3, L3), length(L3, 4), extract_children(C4, L4), length(L4, 5).
    
  positive_set:
  - grid:
    - any_displacement:
      - repeat_before:
          n: 2
          list:
            - *any_obj
    - any_displacement:
      - repeat_before:
          n: 3
          list:
            - *any_obj
    - any_displacement:
      - repeat_before:
          n: 4
          list:
            - *any_obj
    - any_displacement:
      - repeat_before:
          n: 5
          list:
            - *any_obj
  negative_set:
  - grid:
    - permute:
      - any_displacement:
        - repeat_before:
            n: 2
            list:
              - *any_obj
      - any_displacement:
        - repeat_before:
            n: 3
            list:
              - *any_obj
      - any_displacement:
        - repeat_before:
            n: 4
            list:
              - *any_obj
      - any_displacement:
        - repeat_before:
            n: 5
            list:
              - *any_obj
-
  name: clustered features
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_op_and_chld(C, grid, [C1, C2, C3, C4]), extract_children(C1, L1), same_non_size(L1), extract_children(C2, L2), 
                same_non_size(L2), extract_children(C3, L3), same_non_size(L3), extract_children(C4, L4), same_non_size(L4).
                
  positive_set:
  - grid:
    - any_displacement:
      - random_repeat_before:
          min: 2
          max: 3
          list:
          - pick_before: &fixed_random_large
              n: 1
              list:
                - {shape: triangle, color: ~, size: large}
                - {shape: square, color: ~, size: large}
                - {shape: circle, color: ~, size: large}
                - {shape: ~, color: red, size: large}
                - {shape: ~, color: green, size: large}
                - {shape: ~, color: blue, size: large}
                - {shape: ~, color: cyan, size: large}
                - {shape: ~, color: magenta, size: large}
                - {shape: ~, color: yellow, size: large}
    - any_displacement:
      - random_repeat_before:
          min: 2
          max: 3
          list:
          - pick_before: *fixed_random_large
    - any_displacement:
      - random_repeat_before:
          min: 2
          max: 3
          list:
          - pick_before: *fixed_random_large
    - any_displacement:
      - random_repeat_before:
          min: 2
          max: 3
          list:
          - pick_before: *fixed_random_large
  
  negative_set:
  - grid:
    - any_displacement:
      - random_repeat_before:
          min: 2
          max: 3
          list:
            - *any_lrg
    - any_displacement:
      - random_repeat_before:
          min: 2
          max: 3
          list:
            - *any_lrg
    - any_displacement:
      - random_repeat_before:
          min: 2
          max: 3
          list:
            - *any_lrg
    - any_displacement:
      - random_repeat_before:
          min: 2
          max: 3
          list:
            - *any_lrg
  - grid: # hard negatives: 3 out of 4 are ok
    - permute_before:
      - any_displacement:
        - random_repeat_before:
            min: 2
            max: 3
            list:
              - *any_lrg
      - any_displacement:
        - random_repeat_before:
            min: 2
            max: 3
            list:
            - pick_before: *fixed_random_large
      - any_displacement:
        - random_repeat_before:
            min: 2
            max: 3
            list:
            - pick_before: *fixed_random_large
      - any_displacement:
        - random_repeat_before:
            min: 2
            max: 3
            list:
            - pick_before: *fixed_random_large
  
-
  name: diag implication # Either a grid of four arbitrary non-diagonal sets, or a grid of one diagonal with objects with the same features and three arbitrary non-diagonals
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_op_and_chld(C, grid, L), forall(member(C1, L), (extract_operator(C1, COMP), non_diag(COMP))).
    valid(C) :- extract_op_and_chld(C, grid, L), member(C1, L), extract_op_and_chld(C1, COMP, L1), diag(COMP), all_same(_, L1).
    
  positive_set:
  - grid:
    - pick:
        n: 1
        list:
          - any_non_diag:
            - repeat_before:
                n: 4
                list:
                  - *any_obj
          - any_non_diag:
            - repeat:          # Confounder: there is a good probability that non-diagonals can contain all the same shape
                n: 4
                list:
                  - *any_obj
    - pick:
        n: 1
        list:
          - any_non_diag:
            - repeat_before:
                n: 4
                list:
                  - *any_obj
          - any_non_diag:
            - repeat:
                n: 4
                list:
                  - *any_obj
    - pick:
        n: 1
        list:
          - any_non_diag:
            - repeat_before:
                n: 4
                list:
                  - *any_obj
          - any_non_diag:
            - repeat:
                n: 4
                list:
                  - *any_obj
    - pick:
        n: 1
        list:
          - any_non_diag:
            - repeat_before:
                n: 4
                list:
                  - *any_obj
          - any_non_diag:
            - repeat:
                n: 4
                list:
                  - *any_obj
  - grid:
    - permute:
      - any_diag:
        - repeat:
            n: 4
            list:
              - *any_obj
      - pick:
          n: 1
          list:
            - any_non_diag:
              - repeat_before:
                  n: 4
                  list:
                    - *any_obj
            - any_non_diag:
              - repeat:
                  n: 4
                  list:
                    - *any_obj
      - pick:
          n: 1
          list:
            - any_non_diag:
              - repeat_before:
                  n: 4
                  list:
                    - *any_obj
            - any_non_diag:
              - repeat:
                  n: 4
                  list:
                    - *any_obj
      - pick:
          n: 1
          list:
            - any_non_diag:
              - repeat_before:
                  n: 4
                  list:
                    - *any_obj
            - any_non_diag:
              - repeat:
                  n: 4
                  list:
                    - *any_obj
           
  negative_set:
  - grid:
    - permute:
      - any_diag:
          - repeat_before:
              n: 4
              list:
                - *any_obj
      - pick:
          n: 1
          list:
            - any_non_diag:
              - repeat_before:
                 n: 4
                 list:
                   - *any_obj
            - any_non_diag:
              - repeat:
                  n: 4
                  list:
                    - *any_obj
      - pick:
          n: 1
          list:
            - any_non_diag:
              - repeat_before:
                 n: 4
                 list:
                   - *any_obj
            - any_non_diag:
              - repeat:
                 n: 4
                 list:
                   - *any_obj
      - pick:
          n: 1
          list:
            - any_non_diag:
              - repeat_before:
                 n: 4
                 list:
                   - *any_obj
            - any_non_diag:
              - repeat:
                 n: 4
                 list:
                   - *any_obj
                   
-
  name: double palindrome
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    tmp_palindrome(C) :- atom(C).
    tmp_palindrome(C) :- extract_children(C, L), reverse(L, L).
    forall_palindrome(L) :- forall(member(C1, L), tmp_palindrome(C1)).
    valid(C) :- extract_op_and_chld(C, COMP, L), line(COMP), reverse(L, L), forall_palindrome(L).
    
  positive_set:
  - stack:
    - palindrome:
      - permute:
        - *any_obj
        - *any_obj
        - side_by_side:
          - palindrome:
            - *any_obj
            - *any_obj
            - *any_obj
  - side_by_side:
    - palindrome:
      - permute:
        - *any_obj
        - *any_obj
        - stack:
          - palindrome:
            - *any_obj
            - *any_obj
            - *any_obj
      
  negative_set:
  - stack:
    - permute:
      - palindrome:
        - permute:
          - *any_obj
          - *any_obj
          - side_by_side:
            - permute:
              - palindrome:
                - *any_obj
                - *any_obj
                - *any_obj
  - side_by_side:
    - permute:
      - palindrome:
        - permute:
          - *any_obj
          - *any_obj
          - stack:
            - permute:
              - palindrome:
                - *any_obj
                - *any_obj
                - *any_obj
  - stack:
    - permute:
      - palindrome:
        - permute:
          - *any_obj
          - *any_obj
          - side_by_side:
            - palindrome:
              - *any_obj
              - *any_obj
              - *any_obj
  - side_by_side:
    - permute:
      - palindrome:
        - permute:
          - *any_obj
          - *any_obj
          - stack:
            - palindrome:
              - *any_obj
              - *any_obj
              - *any_obj
  - stack:
    - palindrome:
      - permute:
        - *any_obj
        - *any_obj
        - side_by_side:
          - permute:
            - palindrome:
              - *any_obj
              - *any_obj
              - *any_obj
  - side_by_side:
    - palindrome:
      - permute:
        - *any_obj
        - *any_obj
        - stack:
          - permute:
            - palindrome:
              - *any_obj
              - *any_obj
              - *any_obj
-
  name: double pseudo palindrome
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    pseudo_palindrome([]).
    pseudo_palindrome([_]).
    pseudo_palindrome(L) :- middle(L,M),pseudo_palindrome(M),last(L,A),first(L,B), same_shape(_, [A,B]).
    pseudo_palindrome(L) :- middle(L,M),pseudo_palindrome(M),last(L,A),first(L,B), same_color(_, [A,B]).
    pseudo_palindrome(L) :- middle(L,M),pseudo_palindrome(M),last(L,A),first(L,A), extract_operator(A, _).
    perpendicular(C) :- extract_operator(C, stack), contains(C, C1), extract_operator(C1, side_by_side).
    perpendicular(C) :- extract_operator(C, side_by_side), contains(C, C1), extract_operator(C1, stack).
    valid(C) :- perpendicular(C), extract_children(C, L), getmiddle(L, C1), extract_children(C1, L1), pseudo_palindrome(L), pseudo_palindrome(L1).
                
  positive_set:
  - stack:
    - palindrome_before:
      - pick_before: *fixed_random_large
      - pick_before: *fixed_random_large
      - side_by_side:
        - palindrome_before:
          - pick_before: *fixed_random_large
          - pick_before: *fixed_random_large
          - pick_before: *fixed_random_large
  - side_by_side:
    - palindrome_before:
      - pick_before: *fixed_random_large
      - pick_before: *fixed_random_large
      - stack:
        - palindrome_before:
          - pick_before: *fixed_random_large
          - pick_before: *fixed_random_large
          - pick_before: *fixed_random_large
      
  negative_set:
  - stack:
    - argsort:
        idx: [0, 1, 4, 2, 3]
        list:
          - permute_before:
            - repeat_before:
                n: 2
                list:
                  - pick_before: *fixed_random_large
                  - pick_before: *fixed_random_large
          - side_by_side:
            - permute_before:
              - pick_before: *fixed_random_large
              - repeat_before:
                  n: 2
                  list:
                    - pick_before: *fixed_random_large
                    - pick_before: *fixed_random_large
  - side_by_side:
    - argsort:
        idx: [0, 1, 4, 2, 3]
        list:
          - permute_before:
            - repeat_before:
                n: 2
                list:
                  - pick_before: *fixed_random_large
                  - pick_before: *fixed_random_large
          - stack:
            - permute_before:
              - pick_before: *fixed_random_large
              - repeat_before:
                  n: 2
                  list:
                    - pick_before: *fixed_random_large
                    - pick_before: *fixed_random_large
-
  name: triple palindrome
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    tmp_palindrome(C) :- atom(C).
    tmp_palindrome(C) :- extract_children(C, L), reverse(L, L).
    forall_palindrome(L) :- forall(member(C1, L), tmp_palindrome(C1)).
    forall_palindrome2(L) :- forall(member(C1, L), forall_palindrome(C1)).
    valid(C) :- extract_op_and_chld(C, COMP, L), diag(COMP), reverse(L, L), forall_palindrome(L), forall_palindrome2(L).
    
  positive_set:
  - any_diag:
    - palindrome:
      - stack:
        - palindrome:
          - {shape: ~, color: ~, size: small}
          - {shape: ~, color: ~, size: small}
          - side_by_side:
            - palindrome:
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
      - stack:
        - palindrome:
          - {shape: ~, color: ~, size: small}
          - {shape: ~, color: ~, size: small}
          - side_by_side:
            - palindrome:
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
  
  negative_set: # At least one of the three levels is not a palindrome
  - any_diag:
    - permute:
      - palindrome:
        - stack:
          - palindrome:
            - {shape: ~, color: ~, size: small}
            - {shape: ~, color: ~, size: small}
            - side_by_side:
              - palindrome:
                - {shape: ~, color: ~, size: small}
                - {shape: ~, color: ~, size: small}
                - {shape: ~, color: ~, size: small}
        - stack:
          - palindrome:
            - {shape: ~, color: ~, size: small}
            - {shape: ~, color: ~, size: small}
            - side_by_side:
              - palindrome:
                - {shape: ~, color: ~, size: small}
                - {shape: ~, color: ~, size: small}
                - {shape: ~, color: ~, size: small}
  - any_diag:
    - permute:
      - palindrome:
        - stack:
          - permute:
            - palindrome:
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
              - side_by_side:
                - palindrome:
                  - {shape: ~, color: ~, size: small}
                  - {shape: ~, color: ~, size: small}
                  - {shape: ~, color: ~, size: small}
        - stack:
          - permute:
            - palindrome:
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
              - side_by_side:
                - palindrome:
                  - {shape: ~, color: ~, size: small}
                  - {shape: ~, color: ~, size: small}
                  - {shape: ~, color: ~, size: small}
  - any_diag:
    - permute:
      - palindrome:
        - stack:
          - permute:
            - palindrome:
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
              - side_by_side:
                - permute:
                  - palindrome:
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
        - stack:
          - permute:
            - palindrome:
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
              - side_by_side:
                - permute:
                  - palindrome:
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
  - any_diag:
    - permute:
      - palindrome:
        - stack:
            - palindrome:
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
              - side_by_side:
                - permute:
                  - palindrome:
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
        - stack:
            - palindrome:
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
              - side_by_side:
                - permute:
                  - palindrome:
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
  - any_diag:
      - palindrome:
        - stack:
          - permute:
            - palindrome:
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
              - side_by_side:
                - permute:
                  - palindrome:
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
        - stack:
            - palindrome:
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
              - side_by_side:
                - permute:
                  - palindrome:
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
  - any_diag:
      - palindrome:
        - stack:
          - permute:
            - palindrome:
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
              - side_by_side:
                  - palindrome:
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
        - stack:
          - permute:
            - palindrome:
              - {shape: ~, color: ~, size: small}
              - {shape: ~, color: ~, size: small}
              - side_by_side:
                  - palindrome:
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
                    - {shape: ~, color: ~, size: small}
-
  name: smallest vertical line is uniform
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    minimum_count([H|_], H, 1) :- atom(H).
    minimum_count([C], C, N) :- extract_children(C, L), length(L, N).
    minimum_count([H|T], H, N) :- extract_children(H, L), length(L, N), minimum_count(T, _, N1), less_eq(N, N1).
    minimum_count([H|T], X, N1) :- extract_children(H, L), length(L, N), minimum_count(T, X, N1), greater(N, N1).
    valid(C) :- extract_op_and_chld(C, side_by_side_reduce_bb, L), minimum_count(L, C1, _), extract_op_and_chld(C1, stack, L1), same_non_size(L1).
    
  positive_set:
  - side_by_side_reduce_bb:
    - permute:
      - stack:
        - random_repeat_before:
            min: 2
            max: 3
            list:
            - pick_before: &fixed_random_small
                n: 1
                list:
                - {shape: triangle, color: ~, size: small}
                - {shape: square, color: ~, size: small}
                - {shape: circle, color: ~, size: small}
                - {shape: ~, color: red, size: small}
                - {shape: ~, color: green, size: small}
                - {shape: ~, color: blue, size: small}
                - {shape: ~, color: cyan, size: small}
                - {shape: ~, color: magenta, size: small}
                - {shape: ~, color: yellow, size: small}
      - repeat_before:
          n: 3
          list:
          - stack:
            - random_repeat_before:
                min: 4
                max: 5
                list:
                - {shape: ~, color: ~, size: small}
  
  negative_set:
  - side_by_side_reduce_bb:
    - permute:
      - stack:
        - random_repeat_before:
            min: 2
            max: 3
            list:
            - {shape: ~, color: ~, size: small}
      - repeat_before:
          n: 3
          list:
          - stack:
            - random_repeat_before:
                min: 4
                max: 5
                list:
                - {shape: ~, color: ~, size: small}
-
  name: simple scales
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_op_and_chld(C, side_by_side_reduce_bb, [A, triangle_red_large, B]), same_size(_, [A,B]).
    valid(C) :- extract_op_and_chld(C, diag_ul_lr, [A, triangle_red_large, B]), extract_size(A, small), extract_size(B, large).
    valid(C) :- extract_op_and_chld(C, diag_ll_ur, [A, triangle_red_large, B]), extract_size(A, large), extract_size(B, small).
    
  positive_set:
  - side_by_side_reduce_bb:
    - {shape: not_triangle, color: ~, size: small}
    - {shape: triangle, color: red, size: large}
    - {shape: not_triangle, color: ~, size: small}
  - side_by_side_reduce_bb:
    - {shape: not_triangle, color: ~, size: large}
    - {shape: triangle, color: red, size: large}
    - {shape: not_triangle, color: ~, size: large}
  - diag_ul_lr:
    - {shape: not_triangle, color: ~, size: small}
    - {shape: triangle, color: red, size: large}
    - {shape: not_triangle, color: ~, size: large}
  - diag_ll_ur:
    - {shape: not_triangle, color: ~, size: large}
    - {shape: triangle, color: red, size: large}
    - {shape: not_triangle, color: ~, size: small}
  negative_set:
  - side_by_side_reduce_bb:
    - {shape: not_triangle, color: ~, size: large}
    - {shape: triangle, color: red, size: large}
    - {shape: not_triangle, color: ~, size: small}
  - side_by_side_reduce_bb:
    - {shape: not_triangle, color: ~, size: small}
    - {shape: triangle, color: red, size: large}
    - {shape: not_triangle, color: ~, size: large}
  - diag_ul_lr:
    - {shape: not_triangle, color: ~, size: small}
    - {shape: triangle, color: red, size: large}
    - {shape: not_triangle, color: ~, size: small}
  - diag_ll_ur:
    - {shape: not_triangle, color: ~, size: small}
    - {shape: triangle, color: red, size: large}
    - {shape: not_triangle, color: ~, size: small}
  - diag_ul_lr:
    - {shape: not_triangle, color: ~, size: large}
    - {shape: triangle, color: red, size: large}
    - {shape: not_triangle, color: ~, size: large}
  - diag_ll_ur:
    - {shape: not_triangle, color: ~, size: large}
    - {shape: triangle, color: red, size: large}
    - {shape: not_triangle, color: ~, size: large}
  - diag_ul_lr:
    - {shape: not_triangle, color: ~, size: large}
    - {shape: triangle, color: red, size: large}
    - {shape: not_triangle, color: ~, size: small}
  - diag_ll_ur:
    - {shape: not_triangle, color: ~, size: small}
    - {shape: triangle, color: red, size: large}
    - {shape: not_triangle, color: ~, size: large}
    
-
  name: counting scales
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_op_and_chld(C, side_by_side_reduce_bb, [A, triangle_red_large, B]), extract_children(A, L1), extract_children(B, L2), length(L1, N), length(L2, N).
    valid(C) :- extract_op_and_chld(C, diag_ul_lr, [A, triangle_red_large, B]), extract_children(A, L1), extract_children(B, L2), length(L1, N1), length(L2, N2), less(N1, N2).
    valid(C) :- extract_op_and_chld(C, diag_ll_ur, [A, triangle_red_large, B]), extract_children(A, L1), extract_children(B, L2), length(L1, N1), length(L2, N2), greater(N1, N2).
    
  positive_set:
  - side_by_side_reduce_bb:
    - stack:
      - store: &n_objects
          alias: n_objects
          list:
          - random_repeat_before:
              min: 1
              max: 3
              list:
              - {shape: not_triangle, color: ~, size: small}
    - {shape: triangle, color: red, size: large}
    - stack:
      - recall:
          alias: n_objects
  - diag_ul_lr:
    - stack:
      - store: *n_objects
    - {shape: triangle, color: red, size: large}
    - stack:
      - permute: &more_than_n
        - recall:
            alias: n_objects
        - random_repeat_before:
            min: 1
            max: 2
            list:
            - {shape: not_triangle, color: ~, size: small}
  - diag_ll_ur:
    - argsort:
        idx: [2, 1, 0]
        list:
          - stack:
            - store: *n_objects
          - {shape: triangle, color: red, size: large}
          - stack:
            - permute: *more_than_n
  negative_set:
  - diag_ul_lr:
    - stack:
      - store: *n_objects
    - {shape: triangle, color: red, size: large}
    - stack:
      - recall:
          alias: n_objects
  - diag_ll_ur:
    - stack:
      - store: *n_objects
    - {shape: triangle, color: red, size: large}
    - stack:
      - recall:
          alias: n_objects
  - side_by_side_reduce_bb:
    - stack:
      - store: *n_objects
    - {shape: triangle, color: red, size: large}
    - stack:
      - permute: *more_than_n
  - side_by_side_reduce_bb:
    - argsort:
        idx: [2, 1, 0]
        list:
          - stack:
            - store: *n_objects
          - {shape: triangle, color: red, size: large}
          - stack:
            - permute: *more_than_n
  - diag_ll_ur:
    - stack:
      - store: *n_objects
    - {shape: triangle, color: red, size: large}
    - stack:
      - permute: *more_than_n
  - diag_ul_lr:
    - argsort:
        idx: [2, 1, 0]
        list:
          - stack:
            - store: *n_objects
          - {shape: triangle, color: red, size: large}
          - stack:
            - permute: *more_than_n
-
  name: odd color even shape
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_children(C, L), length(L, N), odd(N), same_color(_, L).
    valid(C) :- extract_children(C, L), length(L, N), even(N), same_shape(_, L).
    
  positive_set:
  - any_displacement: # Odd case
    - permute:
      - store_before:
          alias: color
          list:
          - pick_before:
              n: 1
              list:
              - *any_red
              - *any_grn
              - *any_blu
              - *any_cyn
              - *any_mag
              - *any_ylw
      - repeat_before:
          n: 2
          list:
          - random_repeat_before:
              min: 1
              max: 3
              list:
              - recall:
                  alias: color
  - any_displacement: # Even case
    - permute:
      - repeat_before:
          n: 2
          list:
          - store_before:
              alias: shape
              list:
              - pick_before:
                  n: 1
                  list:
                  - *any_tri
                  - *any_squ
                  - *any_cir
            
          - random_repeat_before:
              min: 0
              max: 2
              list:
              - recall:
                  alias: shape
        
  negative_set:
  - any_displacement: # Odd case
    - permute:
      - store_before:
          alias: shape
          list:
          - pick_before:
              n: 1
              list:
              - *any_tri
              - *any_squ
              - *any_cir
      - repeat_before:
          n: 2
          list:
          - random_repeat_before:
              min: 1
              max: 3
              list:
              - recall:
                  alias: shape
  - any_displacement: # Even case
    - permute:
      - repeat_before:
          n: 2
          list:
          - store_before:
              alias: color
              list:
              - pick_before:
                  n: 1
                  list:
                  - *any_red
                  - *any_grn
                  - *any_blu
                  - *any_cyn
                  - *any_mag
                  - *any_ylw
          - random_repeat_before:
              min: 0
              max: 2
              list:
              - recall:
                  alias: color
-
  name: red square for each quadrant
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    exists_red_square([X|_]) :- extract_shape(X, square), extract_color(X, red).
    exists_red_square([_|T]) :- exists_red_square(T).
    valid(C) :- extract_op_and_chld(C, grid, [C1, C2, C3, C4]),
                extract_op_and_chld(C1, grid, L1), exists_red_square(L1),
                extract_op_and_chld(C2, grid, L2), exists_red_square(L2),
                extract_op_and_chld(C3, grid, L3), exists_red_square(L3),
                extract_op_and_chld(C4, grid, L4), exists_red_square(L4).
                
  positive_set:
  - grid:
    - repeat_before:
        n: 4
        list:
        - grid:
          - permute:
            - {shape: square, color: red, size: ~}
            - repeat_before:
                n: 3
                list:
                - {shape: ~, color: ~, size: ~}
        
  negative_set:
  - grid:
    - repeat_before:
        n: 4
        list:
        - grid:
          - repeat_before:
              n: 4
              list:
              - pick:
                  n: 1
                  list:
                  - {shape: not_square, color: ~, size: ~}
                  - {shape: square, color: not_red, size: ~}
  - grid:
    - permute:
      - grid:
        - permute:
          - {shape: square, color: red, size: ~}
          - repeat_before:
              n: 3
              list:
              - {shape: ~, color: ~, size: ~}
      - repeat_before:
          n: 3
          list:
          - grid:
            - repeat_before:
                n: 4
                list:
                - pick:
                    n: 1
                    list:
                    - {shape: not_square, color: ~, size: ~}
                    - {shape: square, color: not_red, size: ~}
  - grid:
    - permute:
      - repeat_before:
          n: 2
          list:
          - grid:
            - permute:
              - {shape: square, color: red, size: ~}
              - repeat_before:
                  n: 3
                  list:
                  - {shape: ~, color: ~, size: ~}
      - repeat_before:
          n: 2
          list:
          - grid:
            - repeat_before:
                n: 4
                list:
                - pick:
                    n: 1
                    list:
                    - {shape: not_square, color: ~, size: ~}
                    - {shape: square, color: not_red, size: ~}
  - grid:
    - permute:
      - repeat_before:
          n: 3
          list:
          - grid:
            - permute:
              - {shape: square, color: red, size: ~}
              - repeat_before:
                  n: 3
                  list:
                  - {shape: ~, color: ~, size: ~}
      - repeat_before:
          n: 1
          list:
          - grid:
            - repeat_before:
                n: 4
                list:
                - pick:
                    n: 1
                    list:
                    - {shape: not_square, color: ~, size: ~}
                    - {shape: square, color: not_red, size: ~}
-
  name: same shape for each quadrant
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_op_and_chld(C, grid, [C1, C2, C3, C4]),
            extract_op_and_chld(C1, grid, L1), member(X, L1),
            extract_op_and_chld(C2, grid, L2), member(X, L2),
            extract_op_and_chld(C3, grid, L3), member(X, L3),
            extract_op_and_chld(C4, grid, L4), member(X, L4).
            
  positive_set:
  - grid:
    - grid:
      - permute:
        - store:
            alias: target
            list:
            - {shape: ~, color: ~, size: ~}
        - repeat_before:
            n: 3
            list:
            - {shape: ~, color: ~, size: ~}
    - repeat_before:
        n: 3
        list:
        - grid:
          - permute:
            - recall:
                alias: target
            - repeat_before:
                n: 3
                list:
                - {shape: ~, color: ~, size: ~}
        
  negative_set:
  - grid:
    - repeat_before:
        n: 4
        list:
        - grid:
          - repeat_before:
              n: 4
              list:
              - {shape: ~, color: ~, size: ~}
-
  name: blue circles in diagonals
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_op_and_chld(C, grid, [X1, _, _, X2,
                                              _, X3, X4, _,
                                              _, X5, X6, _,
                                              X7, _, _, X8]),
            extract_color(X1, blue), extract_shape(X1, circle), same_non_size([X1, X2, X3, X4, X5, X6, X7, X8]).
  positive_set:
  - grid:
    - argsort:
        idx: [0, 8, 9, 1, 10, 2, 3, 11, 12, 4, 5, 13, 6, 14, 15, 7]
        list:
        - repeat_before:
            n: 8
            list:
            - {shape: circle, color: blue, size: ~}
        - repeat_before:
            n: 8
            list:
            - {shape: ~, color: ~, size: ~}
    
        
  negative_set:
  - grid:
    - permute:
      - repeat_before:
          n: 8
          list:
          - {shape: circle, color: blue, size: ~}
      - repeat_before:
          n: 8
          list:
          - {shape: ~, color: ~, size: ~}
-
  name: rotational symmetry 90 degrees
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_op_and_chld(C, grid, [C1, C2, C3, C4]),
            extract_op_and_chld(C1, diag_ul_lr, L),
            extract_op_and_chld(C2, diag_ll_ur, L1),
            extract_op_and_chld(C3, diag_ll_ur, L),
            extract_op_and_chld(C4, diag_ul_lr, L1),
            reverse(L, L1).
            
  positive_set:
  - grid:
    - diag_ul_lr:
      - store:
          alias: objects
          list:
          - repeat_before:
              n: 5
              list:
              - {shape: ~, color: ~, size: small}
    - diag_ll_ur:
      - argsort:
          idx: [4, 3, 2, 1, 0]
          list:
          - recall:
              alias: objects
    - diag_ll_ur:
      - recall:
          alias: objects
    - diag_ul_lr:
      - argsort:
          idx: [4, 3, 2, 1, 0]
          list:
          - recall:
              alias: objects
        
  negative_set:
  - grid:
    - diag_ul_lr:
      - store:
          alias: objects
          list:
          - repeat_before:
              n: 4
              list:
              - {shape: ~, color: ~, size: small}
    - diag_ll_ur:
      - permute:
        - recall:
            alias: objects
    - diag_ll_ur:
      - permute:
        - recall:
            alias: objects
    - diag_ul_lr:
      - permute:
        - recall:
            alias: objects
            
-
  name: rotational symmetry 45 degrees
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_op_and_chld(C, grid, [C1, C2, C3, C4, X, C5, C6, C7, C8]),
            extract_op_and_chld(C1, diag_ul_lr, L),
            extract_op_and_chld(C2, stack, L),
            extract_op_and_chld(C3, diag_ll_ur, L1),
            extract_op_and_chld(C4, side_by_side, L),
            extract_op_and_chld(C5, side_by_side, L1),
            extract_op_and_chld(C6, diag_ll_ur, L),
            extract_op_and_chld(C7, stack, L1),
            extract_op_and_chld(C8, diag_ul_lr, L1),
            reverse(L, L1), extract_shape(X, circle), extract_size(X, large).
            
  positive_set:
  - grid:
    - diag_ul_lr:
      - store:
          alias: objects
          list:
          - repeat_before:
              n: 4
              list:
              - {shape: ~, color: ~, size: small}
    - stack:
      - recall:
          alias: objects
    - diag_ll_ur:
      - argsort:
          idx: [3, 2, 1, 0]
          list:
          - recall:
              alias: objects
    - side_by_side:
      - recall:
          alias: objects
    - {shape: circle, color: ~, size: large}
    - side_by_side:
      - argsort:
          idx: [3, 2, 1, 0]
          list:
          - recall:
              alias: objects
    - diag_ll_ur:
      - recall:
          alias: objects
    - stack:
      - argsort:
          idx: [3, 2, 1, 0]
          list:
          - recall:
              alias: objects
    - diag_ul_lr:
      - argsort:
          idx: [3, 2, 1, 0]
          list:
          - recall:
              alias: objects
        
  negative_set:
  - grid:
    - diag_ul_lr:
      - store:
          alias: objects
          list:
          - repeat_before:
              n: 4
              list:
              - {shape: ~, color: ~, size: small}
    - stack:
      - permute:
        - recall:
            alias: objects
    - diag_ll_ur:
      - permute:
        - recall:
            alias: objects
    - side_by_side:
      - permute:
        - recall:
            alias: objects
    - {shape: circle, color: ~, size: large}
    - side_by_side:
      - permute:
        - recall:
            alias: objects
    - diag_ll_ur:
      - permute:
        - recall:
            alias: objects
    - stack:
      - permute:
        - recall:
            alias: objects
    - diag_ul_lr:
      - permute:
        - recall:
            alias: objects
-
  name: pointer shares attribute
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    valid(C) :- extract_op_and_chld(C, diag_ul_lr, [C1, C2]),
            extract_op_and_chld(C1, grid, [_, _, _, X]),
            extract_op_and_chld(C2, stack, L),
            same_non_size([X|L]).
    valid(C) :- extract_op_and_chld(C, diag_ul_lr, [C2, C1]),
            extract_op_and_chld(C1, grid, [X, _, _, _]),
            extract_op_and_chld(C2, stack, L),
            same_non_size([X|L]).
    valid(C) :- extract_op_and_chld(C, diag_ll_ur, [C1, C2]),
            extract_op_and_chld(C1, grid, [_, X, _, _]),
            extract_op_and_chld(C2, stack, L),
            same_non_size([X|L]).
    valid(C) :- extract_op_and_chld(C, diag_ll_ur, [C2, C1]),
            extract_op_and_chld(C1, grid, [_, _, X, _]),
            extract_op_and_chld(C2, stack, L),
            same_non_size([X|L]).
            
  positive_set:
  - diag_ul_lr:
    - stack:
      - repeat_before: &query
          n: 3
          list:
          - store_before:
              alias: query
              list:
              - pick_before:
                  n: 1
                  list:
                  - *any_tri
                  - *any_squ
                  - *any_cir
                  - *any_red
                  - *any_grn
                  - *any_blu
                  - *any_cyn
                  - *any_mag
                  - *any_ylw
    - grid:
      - argsort: &target
          idx: [0, 1, 2, 3]
          list:
          - recall:
              alias: query
          - repeat_before:
              n: 3
              list:
              - {shape: ~, color: ~, size: ~}
  - diag_ul_lr:
    - argsort: 
        idx: [1, 0]
        list:
          - stack:
            - repeat_before: *query
          - grid:
            - argsort:
                <<: *target
                idx: [1, 2, 3, 0]
  - diag_ll_ur:
    - argsort: 
        idx: [0, 1]
        list:
          - stack:
            - repeat_before: *query
          - grid:
            - argsort:
                <<: *target
                idx: [1, 2, 0, 3]
  - diag_ll_ur:
    - argsort: 
        idx: [1, 0]
        list:
          - stack:
            - repeat_before: *query
          - grid:
            - argsort:
                <<: *target
                idx: [1, 0, 2, 3]
        
  negative_set:
  - diag_ul_lr:
    - argsort:
        idx: [0, 1]
        list:
        - stack:
          - repeat_before: *query
        - grid:
          - argsort: &neg_target
              idx: [0, 1, 2, 3]
              list:
              - difference:
                - {shape: ~, color: ~, size: ~}
                - recall:
                    alias: query
              - repeat_before:
                  n: 3
                  list:
                  - {shape: ~, color: ~, size: ~}
  - diag_ul_lr:
    - argsort:
        idx: [1, 0]
        list:
        - stack:
          - repeat_before: *query
        - grid:
          - argsort:
              <<: *neg_target
              idx: [1, 2, 3, 0]
  - diag_ll_ur:
    - argsort:
        idx: [0, 1]
        list:
        - stack:
          - repeat_before: *query
        - grid:
          - argsort:
              <<: *neg_target
              idx: [1, 2, 0, 3]
  - diag_ll_ur:
    - argsort:
        idx: [1, 0]
        list:
        - stack:
          - repeat_before: *query
        - grid:
          - argsort:
              <<: *neg_target
              idx: [1, 0, 2, 3]
-
  name: clockwise vs counter-clockwise
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    rotate([A, B, C, D], [C, A, D, B]).
    valid(C) :- extract_op_and_chld(C, diag_ul_lr, [C1, C2, C3, C4]),
            extract_op_and_chld(C1, grid, L1),
            extract_op_and_chld(C2, grid, L2),
            extract_op_and_chld(C3, grid, L3),
            extract_op_and_chld(C4, grid, L4),
            rotate(L1, L2), rotate(L2, L3), rotate(L3, L4), rotate(L4, L1).
        
  positive_set:
  - diag_ul_lr: # To make clear separation of internal grids perceptively easier
    - grid:
      - store:
          alias: objects
          list:
          - repeat_before:
              n: 4
              list:
              - {shape: ~, color: ~, size: small}
    - grid:
      - argsort: &rotation
          idx: [2, 0, 3, 1]
          list:
          - recall:
              alias: objects
    - grid:
      - argsort: 
          <<: *rotation
          idx: [3, 2, 1, 0]  
    - grid:
      - argsort: 
          <<: *rotation
          idx: [1, 3, 0, 2]         
  negative_set:
  - diag_ul_lr:
    - grid:
      - store:
          alias: objects
          list:
          - repeat_before:
              n: 4
              list:
              - {shape: ~, color: ~, size: small}
    - grid:
      - argsort: 
          <<: *rotation
          idx: [1, 3, 0, 2]
    - grid:
      - argsort: 
          <<: *rotation
          idx: [3, 2, 1, 0]  
    - grid:
      - argsort: 
          <<: *rotation
          idx: [2, 0, 3, 1]
-
  name: majority intersection
  gamma: 0.5
  beta: 0.5
  samples: 12500
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: |-
    majority_color(CO, L) :- nth0(I, L, X1), nth0(J, L, X2), different(I, J), same_color(CO, [X1, X2]).
    majority_shape(SH, L) :- nth0(I, L, X1), nth0(J, L, X2), different(I, J), same_shape(SH, [X1, X2]).

    valid(C) :- extract_op_and_chld(C, side_by_side_reduce_bb, [C1, _, X]),
            extract_op_and_chld(C1, stack, L1), extract_op_and_chld(C2, stack, L2), 
            majority_color(CO, L1),
            extract_color(X, CO1), CO = CO1, extract_shape(X, SH1), same(SH, SH1).
            
  positive_set:
  - side_by_side_reduce_bb:
    - stack:
      - permute:
        - {shape: ~, color: ~, size: ~}
        - repeat_before:
            n: 2
            list:
            - store_before:
                alias: color
                list:
                - pick_before:
                    n: 1
                    list:
                    - *any_red
                    - *any_grn
                    - *any_blu
                    - *any_cyn
                    - *any_mag
                    - *any_ylw
    - stack:
      - permute:
        - {shape: ~, color: ~, size: ~}
        - repeat_before:
            n: 2
            list:
            - store_before:
                alias: shape
                list:
                - pick_before:
                    n: 1
                    list:
                    - *any_tri
                    - *any_squ
                    - *any_cir
    - intersection:
      - recall:
          alias: shape
      - recall:
          alias: color
  negative_set:
  - side_by_side_reduce_bb:
    - stack:
      - permute:
        - {shape: ~, color: ~, size: ~}
        - repeat_before:
            n: 2
            list:
            - store_before:
                alias: color
                list:
                - pick_before:
                    n: 1
                    list:
                    - *any_red
                    - *any_grn
                    - *any_blu
                    - *any_cyn
                    - *any_mag
                    - *any_ylw
    - stack:
      - permute:
        - {shape: ~, color: ~, size: ~}
        - repeat_before:
            n: 2
            list:
            - store_before:
                alias: shape
                list:
                - pick_before:
                    n: 1
                    list:
                    - *any_tri
                    - *any_squ
                    - *any_cir
    - {shape: ~, color: ~, size: ~}
