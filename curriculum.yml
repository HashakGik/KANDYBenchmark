---
-
  name: structured vs random
  gamma: 1.0
  beta: 1.0
  samples: 200
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_set:
  - any_displacement:
    - random_repeat_before:
        min: 3
        max: 5
        list:
          - &any_obj {shape: ~, color: ~, size: ~}
  negative_set:
  - random:
    - random_repeat_before:
        min: 3
        max: 5
        list:
          - *any_obj
-
  name: shared attribute vs random
  gamma: 1.0
  beta: 1.0
  samples: 200
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_rule: >-
    valid(C) :- extract_children(C, L), same_attribute(L). % These predicates are defined in minimal_bg.pl
    
  positive_set:
  - any_displacement:
    - random_repeat_before:
        min: 3
        max: 5
        list:
          - pick_before: &fixed_random_attr
              n: 1
              list:
                - &any_tri {shape: triangle, color: ~, size: ~}
                - &any_squ {shape: square, color: ~, size: ~}
                - &any_cir {shape: circle, color: ~, size: ~}
                - &any_sml {shape: ~, color: ~, size: small}
                - &any_lrg {shape: ~, color: ~, size: large}
                - &any_red {shape: ~, color: red, size: ~}
                - &any_grn {shape: ~, color: green, size: ~}
                - &any_blu {shape: ~, color: blue, size: ~}
                - &any_cyn {shape: ~, color: cyan, size: ~}
                - &any_mag {shape: ~, color: magenta, size: ~}
                - &any_ylw {shape: ~, color: yellow, size: ~}
              
  
  negative_set:
  - any_displacement:
    - random_repeat_before:
        min: 3
        max: 5
        list:
          - *any_obj
          
-
  name: set intersection
  gamma: 1.0
  beta: 1.0
  samples: 200
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_set:
  - random:
    - repeat_before:
        n: 20
        list:
        - {shape: ~, color: ~, size: ~}
  negative_set:
  - random:
    - repeat:
        n: 5
        list:
        - {shape: ~, color: ~, size: ~}
  
-
  name: circle singleton
  gamma: 1.0
  beta: 1.0
  samples: 200
  train_split: 0.8
  val_split: 0.1
  noisy_color: False
  noisy_size: False
  positive_set:
  - side_by_side:
    - stack:
      - diag_ul_lr:
        - &x {shape: ~, color: not_red, size: small}
        #- *x
      - *x
      - diag_ll_ur:
        #- *x
        - *x
    - random_repeat_before:
        min: 3
        max: 6
        list:
        - *x
    - stack:
      - diag_ul_lr:
        #- *x
        - *x
      - *x
      - diag_ll_ur:
        #- *x
        - *x
    - {shape: ~, color: red, size: small}
  negative_set:
  - any_composition:
    - &non_circle {shape: not_circle, color: ~, size: ~}
    - &circle {shape: circle, color: ~, size: ~}
    - *non_circle
-
  name: triangle singleton
  gamma: 1.0
  beta: 1.0
  samples: 20
  train_split: 0.8
  val_split: 0.1
  noisy_color: True
  noisy_size: True
  positive_set:
  - &triangle {shape: triangle, color: ~, size: ~}
  negative_set:
  - &non_triangle {shape: not_triangle, color: ~, size: ~}
-
  name: square singleton
  gamma: 1.0
  beta: 1.0
  samples: 20
  train_split: 0.8
  val_split: 0.1
  noisy_color: True
  noisy_size: True
  positive_set:
  - &square {shape: square, color: ~, size: ~}
  negative_set:
  - &non_square {shape: not_square, color: ~, size: ~}
-
  name: size singleton
  gamma: 1.0
  beta: 1.0
  samples: 20
  train_split: 0.8
  val_split: 0.1
  noisy_color: True
  noisy_size: True
  positive_set:
  - &small_shape {shape: ~, color: ~, size: small}
  negative_set:
  - &large_shape {shape: ~, color: ~, size: large}
-
  name: primary vs secondary color singleton
  gamma: 1.0
  beta: 1.0
  samples: 20
  train_split: 0.8
  val_split: 0.1
  noisy_color: True
  noisy_size: True
  positive_set:
  - &rgb_shape {shape: ~, color: red|green|blue, size: ~}
  negative_set:
  - &cmy_shape {shape: ~, color: yellow|magenta|cyan, size: ~}
-
  name: warm vs cold color singleton
  gamma: 1.0
  beta: 1.0
  samples: 20
  train_split: 0.8
  val_split: 0.1
  noisy_color: True
  noisy_size: True
  positive_set:
  - &warm_shape {shape: ~, color: red|yellow, size: ~}
  negative_set:
  - &cold_shape {shape: ~, color: blue|cyan, size: ~}  
-
  name: circles
  gamma: 1.0
  beta: 1.0
  samples: 20
  train_split: 0.8
  val_split: 0.1
  noisy_color: True
  noisy_size: True
  positive_set:
  - stack:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *circle
  - side_by_side:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *circle
  - diag_ul_lr:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *circle
  - diag_ll_ur:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *circle
  negative_set:
  - stack:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *non_circle
  - side_by_side:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *non_circle
  - diag_ul_lr:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *non_circle
  - diag_ll_ur:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *non_circle
-
  name: triangles
  gamma: 1.0
  beta: 1.0
  samples: 20
  train_split: 0.8
  val_split: 0.1
  noisy_color: True
  noisy_size: True
  positive_set:
  - stack:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *triangle
  - side_by_side:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *triangle
  - diag_ul_lr:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *triangle
  - diag_ll_ur:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *triangle
  negative_set:
  - stack:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *non_triangle
  - side_by_side:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *non_triangle
  - diag_ul_lr:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *non_triangle
  - diag_ll_ur:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *non_triangle
-
  name: squares
  gamma: 1.0
  beta: 1.0
  samples: 20
  train_split: 0.8
  val_split: 0.1
  noisy_color: True
  noisy_size: True
  positive_set:
  - stack:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *square
  - side_by_side:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *square
  - diag_ul_lr:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *square
  - diag_ll_ur:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *square
  negative_set:
  - stack:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *non_square
  - side_by_side:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *non_square
  - diag_ul_lr:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *non_square
  - diag_ll_ur:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *non_square
-
  name: sizes
  gamma: 1.0
  beta: 1.0
  samples: 20
  train_split: 0.8
  val_split: 0.1
  noisy_color: True
  noisy_size: True
  positive_set:
  - stack:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *small_shape
  - side_by_side:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *small_shape
  - diag_ul_lr:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *small_shape
  - diag_ll_ur:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *small_shape
  negative_set:
  - stack:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *large_shape
  - side_by_side:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *large_shape
  - diag_ul_lr:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *large_shape
  - diag_ll_ur:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *large_shape
-
  name: primary vs secondary colors
  gamma: 1.0
  beta: 1.0
  samples: 20
  train_split: 0.8
  val_split: 0.1
  noisy_color: True
  noisy_size: True
  positive_set:
  - stack:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *rgb_shape
  - side_by_side:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *rgb_shape
  - diag_ul_lr:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *rgb_shape
  - diag_ll_ur:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *rgb_shape
  negative_set:
  - stack:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *cmy_shape
  - side_by_side:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *cmy_shape
  - diag_ul_lr:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *cmy_shape
  - diag_ll_ur:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *cmy_shape
-
  name: warm vs cold colors
  gamma: 0.7
  beta: 0.3
  samples: 20
  train_split: 0.8
  val_split: 0.1
  noisy_color: True
  noisy_size: True
  positive_set:
  - stack:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *warm_shape
  - side_by_side:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *warm_shape
  - diag_ul_lr:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *warm_shape
  - diag_ll_ur:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *warm_shape
  negative_set:
  - stack:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *cold_shape
  - side_by_side:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *cold_shape
  - diag_ul_lr:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *cold_shape
  - diag_ll_ur:
    - random_repeat:
        min: 2
        max: 5
        list:
        - *cold_shape
#-
##  name: simple vs hierarchical
#  gamma: 0.7
#  beta: 0.3
#  samples: 20
#-
##  name: 2-level vs 3 level
#  gamma: 0.7
#  beta: 0.3
#  samples: 20
- # A curriculum is a list of tasks. A task is a dictionary with the following mandatory elements:
  name: my_task # task name (for debug purposes)
  gamma: 0.9 # maximum supervision
  beta: 0.5 # minimum supervision
  samples: 50 # number of samples
  train_split: 0.8 # training set split ratio. The training set has samples * train_split elements
  val_split: 0.1 # validation set split ratio. The test set is computed as (1.0 - train_split - val_split)
  noisy_color: True # Inject random noise to colors (while preserving semantic classes)?
  noisy_size: False # Inject random noise to sizes?
  positive_set: # Definition of the positive set for the task. It contains a list of possible samples.
  - stack: # Compositional operator: receives a list of subelements.
    - palindrome:
      - {shape: triangle|circle, color: ~, size: not_small} # Atomic object. ~/null indicates any value. a|b indicates a choice. not_a indicates a negation.
      - {shape: ~, color: red, size: large}
      #- {shape: square, color: ~, size: ~}
      - side_by_side:
        - sort:
            order: asc
            keys: [shape, color]
            list:
              - {shape: ~, color: red, size: small}
              - {shape: ~, color: green, size: small}
              - {shape: ~, color: blue, size: small}
        - {shape: circle, color: blue, size: large}
      - {shape: square, color: magenta, size: small}
      
  
  negative_set:
  - stack:
    - &my_green_object {shape: ~, color: green, size: ~} # Definition of an alias for an object used multiple times.
    - &my_red_object {shape: ~, color: red, size: ~}
    - &my_triangle {shape: triangle, color: ~, size: ~}
    - &my_small {shape: ~, color: ~, size: small}
  - grid:
    - sample:
        n: 2
        list:
          - *my_green_object
          - *my_red_object
          - *my_triangle
          - *my_small
  - grid:
    - pick:
        n: 3
        list:
          - *my_green_object
          - *my_red_object
          - *my_triangle
          - *my_small
  - grid:
    - first:
        n: 2
        list:
          - *my_green_object
          - *my_red_object
          - *my_triangle
          - *my_small
  - grid:
    - last:
        n: 2
        list:
          - *my_green_object
          - *my_red_object
          - *my_triangle
          - *my_small
  - grid:
    - shift:
        n: -1
        list:
          - *my_green_object
          - *my_red_object
          - *my_triangle
          - *my_small
  - grid:
    - repeat:
        n: 2
        list:
          - *my_green_object
          - *my_red_object
          - *my_triangle
          - *my_small
  - grid:
    - random_repeat:
        min: 2
        max: 4
        list:
          - *my_green_object
          - *my_red_object
          - *my_triangle
          - *my_small
  - grid:
    - sort:
        order: desc
        keys: [color, shape]
        list:
          - *my_green_object
          - *my_red_object
          - *my_triangle
          - *my_small
  - grid:
    - permute:
      - *my_green_object
      - *my_red_object
      - *my_triangle
      - *my_small
  - grid:
    - palindrome:
      - *my_green_object
      - *my_red_object
      - *my_triangle
      - *my_small
  - grid:
    - mirror:
      - *my_green_object
      - *my_red_object
      - *my_triangle
      - *my_small
#  ...
